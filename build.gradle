import me.modmuss50.mpp.ReleaseType

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.165'
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

ext.releaseTag = providers.environmentVariable("TAG").orElse("").toString()
ext.isAlpha = ext.releaseTag.contains("alpha")
ext.isBeta = ext.releaseTag.contains("beta")
def relType = ext.isAlpha ? "alpha" : (ext.isBeta ? "beta" : "release")

// All jar files from this folder will be added automatically as runtime-only mod dependencies
def extraModsDir = "extra-mods-${minecraft_version}"

repositories {
    mavenLocal()
    flatDir {
        name "extra-mods"
        dir file(extraModsDir)
    }
    maven {
        name "K-4u Mod maven"
        url "https://modmaven.dev/"
        content {
            includeGroup "mcjty.theoneprobe"
        }
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Patchouli/JEI"
        url = "https://maven.blamejared.com/"
        content {
            includeGroup "vazkii.patchouli"
            includeGroup "mezz.jei"
        }
    }
    maven {
        name "FTB Maven"
        url "https://maven.ftb.dev/releases/"
        content {
            includeGroup "dev.ftb.mods"
        }
    }
}

base {
    archivesName = "${archive_base_name}-${mod_version}+mc${minecraft_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        jvmArguments.addAll '-Xmx4G'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        argument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    compileOnly("mcjty.theoneprobe:theoneprobe:${top_version}") {
        transitive = false
    }

    compileOnly "curse.maven:jade-324717:${jade_curse_id}"
//
    compileOnly "vazkii.patchouli:Patchouli:${patchouli_version}:api"
//    runtimeOnly "vazkii.patchouli:Patchouli:${patchouli_version}"
//
    compileOnly "dev.ftb.mods:ftb-filter-system-neoforge:${ffs_version}" transitive false
//
    compileOnly "mezz.jei:jei-1.21.1-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-1.21.1-neoforge-api:${jei_version}"
//    runtimeOnly "mezz.jei:jei-${minecraft_version}-common:${jei_version}"
//    runtimeOnly "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

    // Locally sourced extra mods for runtime (i.e. testing) - thanks AE2 for this idea
    for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
        def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
        def versionSep = basename.lastIndexOf('-')
        assert versionSep != -1
        def artifactId = basename.substring(0, versionSep)
        def version = basename.substring(versionSep + 1)
        runtimeOnly "extra-mods:$artifactId:$version"
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

def snapExt = ext.releaseTag == "" ? "-SNAPSHOT" : ""
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId = archive_base_name
            groupId = mod_group_id
            version = "${mod_version}+mc${minecraft_version}${snapExt}"
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
        if (System.getenv("MODMAVEN_USER") != null) {
            maven {
                name = "modmaven"
                credentials {
                    username System.getenv("MODMAVEN_USER")
                    password System.getenv("MODMAVEN_PASSWORD")
                }
                url = "https://modmaven.dev/artifactory/local-releases/"
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

Closure<ReleaseType> getReleaseType = { type ->
    switch(type) {
        case "alpha": return ReleaseType.ALPHA
        case "beta": return ReleaseType.BETA
        default: return ReleaseType.STABLE
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSEFORGE_TOKEN").getOrNull() == null
    changelog = providers.environmentVariable("CHANGELOG").orElse("dryrun")
    version = mod_version
    type = getReleaseType(relType)
    file = jar.archiveFile
    displayName = "${mod_name} ${mod_version} MC-${minecraft_version}"
    modLoaders.add("neoforge")

    curseforge {
        projectId = curse_project_id
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersions.add(minecraft_version)
        projectSlug = "modular-routers"
        announcementTitle = "Download from Curseforge"
//        optional {
//            slug = "patchouli"
//        }
    }
"${mod_version}+mc${minecraft_version}"
    modrinth {
        projectId = modrinth_project_id
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.add(minecraft_version)
        announcementTitle = "Download from Modrinth"
//        optional {
//            id = "nU0bVIaL"
//            slug = "patchouli"
//        }
    }

    discord {
        webhookUrl = providers.environmentVariable("DISCORD_WEBHOOK").orElse("dryrun")
        content = changelog.map { "# ${mod_name} v${mod_version} for MC ${minecraft_version} has been released! \n" + it}
//        setPlatforms(platforms.curseforge, platforms.modrinth)
    }
}
